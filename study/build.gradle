import org.gradle.plugins.ide.eclipse.model.SourceFolder 
/*
 * This file was generated by the Gradle 'init' task.
 */
plugins {
    id 'org.springframework.boot' version '3.2.2'
    id 'com.github.node-gradle.node' version '7.0.1'
    id 'eclipse'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.node-gradle.node'

group = 'org.book.app'
version = '0.0.1-SNAPSHOT'
description = 'study'

/**
 * for JDK
 */
java.sourceCompatibility = JavaVersion.VERSION_21
java.targetCompatibility = JavaVersion.VERSION_21
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

/**
 * for node.js & webpack
 */
node {
    version = '18.15.0'
    download = true
}

task webpack(dependsOn: ['npm_run_webpack'])
task debug(dependsOn: ['npm_run_debug'])
task watch(dependsOn: ['npm_run_watch'])
task server(dependsOn: ['npm_run_server'])

eclipse {
	def buildBase = 'build'
	def classBase = buildBase + '/classes/java/main'
	def resourcesBase = buildBase + '/resources/main'
	def srcBase = 'src/main'
    classpath {
        defaultOutputDir = file(buildBase + '/default')
        file.whenMerged {cp ->
        	// 中身見るよう
            //cp.entries.findAll {target ->
            //if (target instanceof SourceFolder) {
        	//	System.out.println(target.path);
        	//}
            //	return target instanceof SourceFolder && target.path.startsWith(srcBase + "/java") 
            //}*.output = classBase
            cp.entries.findAll {it instanceof SourceFolder && it.path.startsWith(srcBase + "/java") }*.output = classBase
           // cp.entries.findAll {it instanceof SourceFolder && it.path.startsWith(srcBase + "/resources") }*.output = resourcesBase
        }
    }
}

compileTestJava {
    options.compilerArgs = ['-proc:none']
}

bootJar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

jar {
    enabled = false
}

/**
 * clean build
 */
task cleanGen(type: Delete) {
    // delete fileTree('src/main/resources/static') {
    //     include 'css/**/*.*'
    //     include 'res/**/*.*'
    //     include 'js/**/*.*'
    // }
    // フォルダも含めて削除
    def dirbaseName = "src/main/resources/static/" 
    def dirNames = ["css","res","js"]
    def gitKeep = ".gitkeep"
    dirNames.toList().forEach{
        dirName  -> 
            def targetDir = dirbaseName + dirName
            //System.out.println(targetDir);
            file(targetDir).list().each{
                f -> 
                    if(!gitKeep.equals(f)){
                        delete "${targetDir}/${f}" 
                    }              
        }
    }

}

// build order
webpack.dependsOn cleanGen
webpack.mustRunAfter cleanGen
build.dependsOn webpack
build.mustRunAfter webpack
bootRun.dependsOn debug
bootRun.mustRunAfter webpack

/**
 * for Spring Boot
 * （ターミナルで）Spring Boot アプリケーション起動すると時用 eclipsでは関係ないかも
 * ./gradlew bootRun
 */
bootRun {
    // for static resource hot reloading
    //  https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html/#running-your-application-reloading-resources
    sourceResources sourceSets.main
    // remote debug support @see .vscode/launch.json
    jvmArgs=["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=7778"]
}

repositories {
    mavenCentral()
}

dependencyManagement {
    dependencies {
        // org.graalvm.sdk version
        dependencySet(group: "org.graalvm.sdk", version: "23.0.2") {
            entry "graal-sdk"
        }
        // org.graalvm.js version
        dependencySet(group: "org.graalvm.js", version: "23.0.2") {
            entry "js"
            entry "js-scriptengine"
        }
        // MyBatis version
        dependencySet(group: "org.mybatis.spring.boot", version: "3.0.3") {
            entry "mybatis-spring-boot-starter"
        }
        // Apache Commons IO version
        dependencySet(group: "commons-io", version: "2.15.1") {
            entry "commons-io"
        }
        // apache pdfbox version
        dependencySet(group: "org.apache.pdfbox", version: "3.0.1") {
            entry "pdfbox"
        }
        // juniversalchardet
        dependencySet(group: "com.googlecode.juniversalchardet", version: "1.0.3") {
            entry "juniversalchardet"
        }
    }
}

dependencies {
    // java上でのjs実行
    implementation "org.graalvm.sdk:graal-sdk"
    implementation "org.graalvm.js:js"
    implementation "org.graalvm.js:js-scriptengine"
    // SpringBoot のWebアプリケーション用ライブラリ
    // SpringBoot のWebAppに関するすべての機能をまとめている
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // SpringBoot のThymeleaf用のライブラリ
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    // Thymeleaf（テンプレートエンジン）ライブラリ
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    // SpringBoot でのDB関連一式
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // MyBatis
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter'
    // spring-securit
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-config'
    // DB Commons DBCP2 
    implementation 'org.apache.commons:commons-dbcp2'
    // ホットデプロイの為のツール
    implementation 'org.springframework.boot:spring-boot-devtools'
    // 文字コード判定用
    implementation 'com.googlecode.juniversalchardet:juniversalchardet'
    // PostgreSQL
    implementation 'org.postgresql:postgresql'
    // Apache Commons IO
    implementation 'commons-io:commons-io'
    // jackson-dataformat-csv
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv'
    // jackson.datatype
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    // apache pdfbox(PDF読み込み用)
    implementation 'org.apache.pdfbox:pdfbox'
    // spring test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    // spring dev
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
}
