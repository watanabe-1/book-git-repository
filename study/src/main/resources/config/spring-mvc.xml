<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mybatis="http://mybatis.org/schema/mybatis-spring" xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
	    http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">
	<!-- Spring MVCの使用を宣言 -->
	<!-- Register components of Spring MVC. -->
	<mvc:annotation-driven>
		<!-- REST API の返却値のリソースのフォーマットとしてJSONを使用 -->
		<mvc:message-converters register-defaults="false">
			<ref bean="jsonMessageConverter" />
		</mvc:message-converters>
		<!-- ページ検索機能を有効にするための設定を追加する。ページ検索が必要ない場合は、本設定は不要であるが、定義があっても問題はない。今のとこ実装してないからいらないかも-->
		<mvc:argument-resolvers>
			<bean class="org.springframework.security.web.method.annotation.AuthenticationPrincipalArgumentResolver" />
			<bean class="org.springframework.data.web.PageableHandlerMethodArgumentResolver" />
		</mvc:argument-resolvers>
	</mvc:annotation-driven>

	<!--org.terasoluna.gfw.web.logging.TraceLoggingInterceptorは、 Controllerの処理開始、終了をログ出力するHandlerInterceptorである。
		終了時にはControllerが返却したView名とModelに追加された属性、 およびControllerの処理に要した時間も出力する。 spring-mvc.xmlの<mvc:interceptors>内に以下のようにTraceLoggingInterceptorを追加する。
		デフォルトでは、Controllerの処理に3秒以上かかった場合にWARNログを出力する。 この閾値を変える場合は、warnHandlingNanosプロパティにナノ秒単位で指定する。 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<mvc:exclude-mapping path="/resources/**" />
			<bean class="org.terasoluna.gfw.web.logging.TraceLoggingInterceptor">

				<!--閾値を10秒(10 * 1000 * 1000 * 1000 ナノ秒)に変更したい場合は以下のように設定すればよい。 このとき、10秒（10000000000ナノ秒）のようにint型の範囲を超える閾値を設定する場合は、
					long型で値を設定する点に留意されたい。 <property name="warnHandlingNanos" value="#{10L * 1000L
					* 1000L * 1000L}" /> -->

			</bean>
		</mvc:interceptor>
	</mvc:interceptors>

	<context:annotation-config />
	<!-- Beanクラスが格納されるパッケージのルートを宣言 -->
	<context:component-scan base-package="org.watanabe.app.common" />
	<context:component-scan base-package="org.watanabe.app.study" />
	<context:component-scan base-package="org.watanabe.app.rest" />
	<!-- DB設定(環境依存の外部化) -->
	<context:property-placeholder location="classpath:config/properties/database.properties" order="1" ignore-unresolvable="true" />
	<!-- DB設定以外のプロパティファイルの読み込み(環境依存の外部化) -->
	<!-- 参考元ではlocation="classpath*:/META-INF/spring/*.properties" だったが上記に合わせて変更 -->
	<context:property-placeholder location="classpath:config/properties/*.properties" order="2" ignore-unresolvable="true" />

	<!-- DB接続設定 -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxTotal" value="${jdbc.maxTotal}" />
	</bean>

	<!-- MyBatis マッピング設定 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath*:config/mappers/**/*.xml" />
		<property name="configuration">
			<bean class="org.apache.ibatis.session.Configuration">
				<property name="mapUnderscoreToCamelCase" value="true" />
			</bean>
		</property>
	</bean>
	<!-- Mapperクラススキャン対象パッケージ -->
	<mybatis:scan base-package="org.watanabe.app.study.mapper" />

	<!-- multipart-config(ファイルアップロード用) -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.support.StandardServletMultipartResolver"></bean>

	<!-- 例外ハンドリング -->
	<!-- ExceptionCodeResolverを、bean定義に追加する。 -->
	<!-- Exception Code Resolver. -->
	<bean id="exceptionCodeResolver" class="org.terasoluna.gfw.common.exception.SimpleMappingExceptionCodeResolver">
		<!-- Setting and Customization by project. -->
		<!--ハンドリング対象とする例外名と、適用する「例外コード(メッセージID)」のマッピングを指定する。 設定例では、例外クラス(又は親クラス)のクラス名に、”BusinessException”が含まれている場合は、
			”e.xx.fw.8001”、 “ResourceNotFoundException”が含まれている場合は、 ”e.xx.fw.5001”が「例外コード(メッセージID)」となる。 -->
		<property name="exceptionMappings">
			<map>
				<entry key="ResourceNotFoundException" value="e.ex.fw.5001" />
				<entry key="HttpRequestMethodNotSupportedException" value="e.ex.fw.6001" />
				<entry key="MediaTypeNotAcceptableException" value="e.ex.fw.6002" />
				<entry key="HttpMediaTypeNotSupportedException" value="e.ex.fw.6003" />
				<entry key="MethodArgumentNotValidException" value="e.ex.fw.7001" />
				<entry key="BindException" value="e.ex.fw.7002" />
				<entry key="JsonParseException" value="e.ex.fw.7003" />
				<entry key="UnrecognizedPropertyException" value="e.ex.fw.7004" />
				<entry key="JsonMappingException" value="e.ex.fw.7005" />
				<entry key="TypeMismatchException" value="e.ex.fw.7006" />
				<entry key="BusinessException" value="e.ex.fw.8001" />
				<entry key="OptimisticLockingFailureException" value="e.ex.fw.8002" />
				<entry key="PessimisticLockingFailureException" value="e.ex.fw.8002" />
				<entry key="DataAccessException" value="e.ex.fw.9002" />
			</map>
		</property>
		<!-- デフォルトの「例外コード(メッセージID)」を指定する。 上記の設定例では、例外クラス(または親クラス)のクラス名に”BusinessException”、
			または”ResourceNotFoundException”が含まれない場合、”e.xx.fw.9001” が例外コード(メッセージID)」となる。 -->
		<property name="defaultExceptionCode" value="e.xx.fw.9001" />
	</bean>

	<!-- ExceptionLoggerを、bean定義に追加する。 -->
	<!-- Exception Logger. -->
	<bean id="exceptionLogger" class="org.terasoluna.gfw.common.exception.ExceptionLogger">
		<!--xceptionCodeResolverをDIする。 -->
		<property name="exceptionCodeResolver" ref="exceptionCodeResolver" />
		<!--logMessageFormatにフォーマットを定義する。 {0}は例外コード(メッセージID)、{1}はメッセージがリプレースされる。 -->
		<property name="logMessageFormat" value="[{0}], {1}" />
	</bean>

	<!-- ResultMessagesを保持する例外(BisinessException,ResourceNotFoundException)が発生した際に、
		ログを出力するためのインタセプタクラス（ResultMessagesLoggingInterceptor）と、 AOPの設定を、bean定義に追加する。 -->
	<!-- ResultMessagesLoggingInterceptorを、bean定義に追加する。 -->
	<!-- interceptor bean. -->
	<bean id="resultMessagesLoggingInterceptor" class="org.terasoluna.gfw.common.exception.ResultMessagesLoggingInterceptor">
		<!-- 例外のログ出力を行うロガーオブジェクトをDIする。“exceptionLogger” を指定する。 -->
		<property name="exceptionLogger" ref="exceptionLogger" />
	</bean>

	<!-- setting AOP. -->
	<aop:config>
		<!-- Serviceクラス(@Serviceアノテーションが付いているクラス) Controllerクラス(@Controllerアノテーションが付いているクラス)のメソッドに対して、
			ResultMessagesLoggingInterceptorを適用する。 -->
		<aop:advisor advice-ref="resultMessagesLoggingInterceptor" pointcut="@within(org.springframework.stereotype.Service)
                             || @within(org.springframework.stereotype.Controller) " />
	</aop:config>

	<!-- <mvc:annotation-driven> を指定した際に、自動的に登録されるHandlerExceptionResolverによって、
		ハンドリングされない例外をハンドリングするためのクラス（SystemExceptionResolver）を、 bean定義に追加する。 -->
	<!-- SystemExceptionResolverを、bean定義に追加する。 -->
	<!-- Setting Exception Handling. -->
	<!-- Exception Resolver. -->
	<bean class="org.terasoluna.gfw.web.exception.SystemExceptionResolver">
		<!-- 例外コード(メッセージID)を解決するオブジェクトをDIする。に定義している、 ”exceptionCodeResolver”を指定する。 -->
		<property name="exceptionCodeResolver" ref="exceptionCodeResolver" />
		<!-- ハンドリングの優先順位を指定する。値は、基本的に「3」で良い。<mvc:annotation-driven>を指定した 際に、自動的に、登録されるクラスの方が、優先順位が上となる -->
		<!-- Setting and Customization by project. -->
		<property name="order" value="3" />
		<!-- ハンドリング対象とする例外名と、遷移先となるView名のマッピングを指定する。 設定では、例外クラス(または親クラス)のクラス名に”.DataAccessException”が含まれている場合、
			”common/error/dataAccessError”が、遷移先のView名となる。 例外クラスが”ResourceNotFoundException”の場合、”common/error/resourceNotFoundError”が、
			遷移先のView名となる。 -->
		<property name="exceptionMappings">
			<map>
				<!-- <entry key="ResourceNotFoundException" value="common/error/resourceNotFoundError" /> <entry key="BusinessException" value="common/error/businessError" /> <entry key="InvalidTransactionTokenException" value="common/error/transactionTokenError" /> <entry key=".DataAccessException" value="common/error/dataAccessError" /> -->
				<entry key="ResourceNotFoundException" value="errors/resourceNotFoundError" />
				<entry key="BusinessException" value="errors/businessError" />
				<entry key="InvalidTransactionTokenException" value="errors/transactionTokenError" />
				<entry key=".DataAccessException" value="errors/dataAccessError" />
			</map>
		</property>
		<!--遷移先となるView名と、HTTPステータスコードのマッピングを指定する。 設定では、View名が”common/error/resourceNotFoundError”の場合に、
			”404(Not Found)”がHTTPステータスコードとなる。 -->
		<property name="statusCodes">
			<map>
				<!-- <entry key="common/error/resourceNotFoundError" value="404" /> <entry key="common/error/businessError" value="409" /> <entry key="common/error/transactionTokenError" value="409" /> <entry key="common/error/dataAccessError" value="500" /> -->
				<entry key="errors/resourceNotFoundError" value="404" />
				<entry key="errors/businessError" value="409" />
				<entry key="errors/transactionTokenError" value="409" />
				<entry key="errors/dataAccessError" value="500" />
			</map>
		</property>
		<!-- ハンドリング対象外とする例外クラスを指定する。 SystemExceptionResolverで致命的なエラーをハンドリングせず、
			サーブレットコンテナに通知するため、org.springframework.web.util.NestedServletExceptionを ハンドリング対象外とする。
			ハンドリング対象外にする理由は、 「@ExceptionHandlerとSystemExceptionResolverによる致命的なエラーのハンドリングついて
			http://terasolunaorg.github.io/guideline/current/ja/ArchitectureInDetail/WebApplicationDetail/ExceptionHandling.html#exception-handling-class-fatalerror-warning
			」を参照されたい。 -->
		<property name="excludedExceptions">
			<array>
				<value>org.springframework.web.util.NestedServletException</value>
			</array>
		</property>
		<!-- 遷移するデフォルトのView名を、指定する。 設定では、例外クラスに”ResourceNotFoundException”、”BusinessException”、
			”InvalidTransactionTokenException”や例外クラス(または親クラス)のクラス名に、 ”.DataAccessException”が含まれない場合、”common/error/systemError”が、
			遷移先のView名となる。 -->
		<property name="defaultErrorView" value="errors/systemError" />
		<!-- レスポンスヘッダに設定するHTTPステータスコードのデフォルト値を指定する。 “500”(Internal Server Error)
			を設定することを推奨する。 -->
		<property name="defaultStatusCode" value="500" />
	</bean>

	<!-- Settings View Resolver. -->
	<mvc:view-resolvers>
		<!-- 実際に遷移するViewは、ViewResolverの設定に依存する。 -->
		<mvc:jsp prefix="/WEB-INF/views/" />
	</mvc:view-resolvers>

	<!-- HandlerExceptionResolverでハンドリングされた例外を、 ログに出力するためのインタセプタクラス（HandlerExceptionResolverLoggingInterceptor）と、
		AOPの設定を、bean定義に追加する。 -->
	<!-- HandlerExceptionResolverLoggingInterceptorを、bean定義に追加する。 -->
	<!-- Setting AOP. -->
	<bean id="handlerExceptionResolverLoggingInterceptor" class="org.terasoluna.gfw.web.exception.HandlerExceptionResolverLoggingInterceptor">
		<!-- 例外のログ出力を行うロガーオブジェクトを、DIする。定義している”exceptionLogger”を指定する。 -->
		<property name="exceptionLogger" ref="exceptionLogger" />
	</bean>
	<aop:config>
		<!-- HandlerExceptionResolverインタフェースのresolveExceptionメソッドに対して、 HandlerExceptionResolverLoggingInterceptorを適用
			デフォルトの設定では、共通ライブラリから提供している org.terasoluna.gfw.common.exception.ResultMessagesNotificationException
			のサブクラスの例外は、このクラスで行われるログ出力の対象外となっている。 ResultMessagesNotificationException
			のサブクラスの例外をログ出力対象外としている理由は、 org.terasoluna.gfw.common.exception.ResultMessagesLoggingInterceptor
			によってログ出力されるためである。 デフォルトの設定を変更する必要がある場合は、 HandlerExceptionResolverLoggingInterceptorの設定項目について
			http://terasolunaorg.github.io/guideline/current/ja/ArchitectureInDetail/WebApplicationDetail/ExceptionHandling.html#exception-handling-about-handlerexceptionresolverlogginginterceptor
			を参照されたい。 -->
		<aop:advisor advice-ref="handlerExceptionResolverLoggingInterceptor" pointcut="execution(* org.springframework.web.servlet.HandlerExceptionResolver.resolveException(..))" />
	</aop:config>

	<!-- 致命的なエラー、Spring MVC管理外で発生する例外を、 ログに出力するためのFilterクラス（ExceptionLoggingFilter）を、bean定義とweb.xmlに追加する。 -->
	<!-- Filter. -->
	<!-- ExceptionLoggingFilterを、bean定義に追加する。 -->
	<bean id="exceptionLoggingFilter" class="org.terasoluna.gfw.web.exception.ExceptionLoggingFilter">
		<!-- 例外のログ出力を行うロガーオブジェクトを、DIする。”exceptionLogger”を指定する。 -->
		<property name="exceptionLogger" ref="exceptionLogger" />
	</bean>

	<!-- Load properties files for placeholder. -->
	<!-- (1) -->
	<context:property-placeholder location="classpath*:/META-INF/spring/*.properties" />

	<bean id="jsonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="objectMapper" ref="objectMapper" />
	</bean>

	<bean id="objectMapper" class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
		<!-- (2) -->
		<property name="dateFormat">
			<bean class="com.fasterxml.jackson.databind.util.StdDateFormat" />
		</property>
	</bean>

	<!-- アノテーションでトランザクションを制御 -->
	<tx:annotation-driven />
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- AOPでトランザクションを制御 -->
	<tx:advice id="txAdv" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" />
			<tx:method name="update*" />
			<tx:method name="delete*" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:advisor advice-ref="txAdv" pointcut="execution(* org.watanabe.app.study.service.*Service.*(..))" />
	</aop:config>
</beans>
