<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.book.app.study.mapper.DefaultCategoryMapper">
  <select id="findAll" resultType="org.book.app.study.entity.DefaultCategory">
    select SERIAL_KEY, DEFAULT_CATEGORY_ID, USER_ID, BOOKS_PLACE, BOOKS_TYPE, BOOKS_METHOD, BOOKS_AMMOUNT_MIN, BOOKS_AMMOUNT_MAX, CAT_CODE, REGEX_ENABLED, INS_DATE, INS_USER, UPD_DATE, UPD_USER from DEFAULT_CATEGORY
      order by DEFAULT_CATEGORY_ID, USER_ID
  </select>
  <select id="findOne" resultType="org.book.app.study.entity.DefaultCategory">
    select SERIAL_KEY, DEFAULT_CATEGORY_ID, USER_ID, BOOKS_PLACE, BOOKS_TYPE, BOOKS_METHOD, BOOKS_AMMOUNT_MIN, BOOKS_AMMOUNT_MAX, CAT_CODE, REGEX_ENABLED, INS_DATE, INS_USER, UPD_DATE, UPD_USER from DEFAULT_CATEGORY
      where DEFAULT_CATEGORY_ID = #{defaultCategoryId} AND USER_ID = #{userId}
  </select>
  <insert id="saveBulk" parameterType="java.util.List">
    insert into DEFAULT_CATEGORY (DEFAULT_CATEGORY_ID, USER_ID, BOOKS_PLACE, BOOKS_TYPE, BOOKS_METHOD, BOOKS_AMMOUNT_MIN, BOOKS_AMMOUNT_MAX, CAT_CODE, REGEX_ENABLED, INS_DATE, INS_USER, UPD_DATE, UPD_USER) values
    <foreach collection="defList" item="def" separator=","> 
      (#{def.defaultCategoryId}, #{def.userId}, #{def.booksPlace}, #{def.booksType}, #{def.booksMethod}, #{def.booksAmmountMin}, #{def.booksAmmountMax}, #{def.catCode}, #{def.regexEnabled}, #{def.insDate}, #{def.insUser}, #{def.updDate}, #{def.updUser})
    </foreach>
  </insert>
  <insert id="saveOne">
    insert into DEFAULT_CATEGORY (DEFAULT_CATEGORY_ID, USER_ID, BOOKS_PLACE, BOOKS_TYPE, BOOKS_METHOD, BOOKS_AMMOUNT_MIN, BOOKS_AMMOUNT_MAX, CAT_CODE, REGEX_ENABLED, INS_DATE, INS_USER, UPD_DATE, UPD_USER)
      values (#{defaultCategoryId}, #{userId}, #{booksPlace}, #{booksType}, #{booksMethod}, #{booksAmmountMin}, #{booksAmmountMax}, #{catCode}, #{regexEnabled}, #{insDate}, #{insUser}, #{updDate}, #{updUser})
  </insert>
  <update id="updateAll">
    update DEFAULT_CATEGORY set DEFAULT_CATEGORY_ID = #{defaultCategoryId}, USER_ID = #{userId}, BOOKS_PLACE = #{booksPlace}, BOOKS_TYPE = #{booksType}, BOOKS_METHOD = #{booksMethod}, BOOKS_AMMOUNT_MIN = #{booksAmmountMin}, BOOKS_AMMOUNT_MAX = #{booksAmmountMax}, CAT_CODE = #{catCode}, REGEX_ENABLED = #{regexEnabled}, UPD_DATE = #{updDate}, UPD_USER = #{updUser}
  </update>
  <update id="updateOne">
    update DEFAULT_CATEGORY set DEFAULT_CATEGORY_ID = #{def.defaultCategoryId}, USER_ID = #{def.userId}, BOOKS_PLACE = #{def.booksPlace}, BOOKS_TYPE = #{def.booksType}, BOOKS_METHOD = #{def.booksMethod}, BOOKS_AMMOUNT_MIN = #{def.booksAmmountMin}, BOOKS_AMMOUNT_MAX = #{def.booksAmmountMax}, CAT_CODE = #{def.catCode}, REGEX_ENABLED = #{def.regexEnabled}, UPD_DATE = #{def.updDate}, UPD_USER = #{def.updUser}
      where DEFAULT_CATEGORY_ID = #{defaultCategoryIdWhere} AND USER_ID = #{userIdWhere}
  </update>
  <delete id="deleteAll">
    delete from DEFAULT_CATEGORY
  </delete>
  <delete id="deleteOne">
    delete from DEFAULT_CATEGORY
      where DEFAULT_CATEGORY_ID = #{defaultCategoryId} AND USER_ID = #{userId}
  </delete>
  <select id="findByUserId" resultType="org.book.app.study.entity.DefaultCategory">
    select SERIAL_KEY, DEFAULT_CATEGORY_ID, USER_ID, BOOKS_PLACE, BOOKS_TYPE, BOOKS_METHOD, BOOKS_AMMOUNT_MIN, BOOKS_AMMOUNT_MAX, CAT_CODE, REGEX_ENABLED, INS_DATE, INS_USER, UPD_DATE, UPD_USER from DEFAULT_CATEGORY
      where USER_ID = #{userId}
      order by USER_ID, BOOKS_PLACE, BOOKS_TYPE, BOOKS_METHOD
  </select>
  <select id="countOne" resultType="java.lang.Integer">
    select COUNT(1)
      where USER_ID = #{userId} AND BOOKS_PLACE = #{booksPlace} AND BOOKS_TYPE = #{booksType} AND BOOKS_METHOD = #{booksMethod}
  </select>
  <insert id="saveAllFromBooks">
    insert into DEFAULT_CATEGORY (USER_ID ,BOOKS_PLACE, BOOKS_TYPE, BOOKS_METHOD, CAT_CODE)
    select RANKED.USER_ID
          , RANKED.BOOKS_PLACE
          , RANKED.BOOKS_TYPE
          , RANKED.BOOKS_METHOD
          , RANKED.CAT_CODE
    from (
        select B.USER_ID
              , B.BOOKS_PLACE
              , B.BOOKS_TYPE
              , B.BOOKS_METHOD
              , B.BOOKS_AMMOUNT
              , B.CAT_CODE
              , ROW_NUMBER() OVER (PARTITION BY USER_ID, BOOKS_PLACE, BOOKS_TYPE, BOOKS_METHOD ORDER BY COUNT(CAT_CODE) DESC) AS RN
        from BOOKS B
        where USER_ID = #{userId}
          and not exists (
                select 1
                from CODE_LOOKUP CDLK
                where CDLK.LIST_NAME = #{listName}
                  and CDLK.SHORT_VALUE = B.CAT_CODE
            )
        group by USER_ID, BOOKS_PLACE, BOOKS_TYPE, BOOKS_METHOD, BOOKS_AMMOUNT,
        CAT_CODE
    ) RANKED
    where RANKED.RN = 1
      and not exists (
          select 1
          from DEFAULT_CATEGORY DC
          where RANKED.USER_ID = DC.USER_ID
            and ((DC.REGEX_ENABLED &lt;&gt; '1' and RANKED.BOOKS_PLACE = DC.BOOKS_PLACE)
                OR (DC.REGEX_ENABLED = '1' and RANKED.BOOKS_PLACE ~ DC.BOOKS_PLACE))
            and RANKED.BOOKS_TYPE = DC.BOOKS_TYPE
            and ((DC.REGEX_ENABLED &lt;&gt; '1' and RANKED.BOOKS_METHOD = DC.BOOKS_METHOD)
                OR (DC.REGEX_ENABLED = '1' and RANKED.BOOKS_METHOD ~ DC.BOOKS_METHOD))
            and ((DC.BOOKS_AMMOUNT_MIN &gt;= '0' and RANKED.BOOKS_AMMOUNT &gt;= DC.BOOKS_AMMOUNT_MIN)
                OR (DC.BOOKS_AMMOUNT_MIN &lt; '0'))
            and ((DC.BOOKS_AMMOUNT_MAX &gt;= '0' and RANKED.BOOKS_AMMOUNT &lt;= DC.BOOKS_AMMOUNT_MAX)
                 OR (DC.BOOKS_AMMOUNT_MAX &lt; '0'))
      );
  </insert>
</mapper>
